// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef MOL_SIM_IMPL_H
#define MOL_SIM_IMPL_H

#include "MolSimSkl.h"
#include "library.h"

class time_pimpl: public virtual time_pskel,
  public ::xml_schema::double_pimpl
{
  public:
  virtual void
  pre ();

  virtual library::time
  post_time ();
};

class epsilon_pimpl: public virtual epsilon_pskel,
  public ::xml_schema::double_pimpl
{
  public:
  virtual void
  pre ();

  virtual library::epsilon
  post_epsilon ();
};

class sigma_pimpl: public virtual sigma_pskel,
  public ::xml_schema::double_pimpl
{
  public:
  virtual void
  pre ();

  virtual library::sigma
  post_sigma ();
};

class dimension_pimpl: public virtual dimension_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  x (int);

  virtual void
  y (int);

  virtual void
  z (int);

  virtual library::dimension
  post_dimension ();

  private:
    library::dimension dimension_;
};

class point_pimpl: public virtual point_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  x (double);

  virtual void
  y (double);

  virtual void
  z (double);

  virtual library::point
  post_point ();

private:
    library::point point_;
};

class velocity_pimpl: public virtual velocity_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  x (double);

  virtual void
  y (double);

  virtual void
  z (double);

  virtual library::velocity
  post_velocity ();

private:
    library::velocity velocity_;
};

class algorithm_pimpl: public virtual algorithm_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual const std::string&
  post_algorithm ();

private:
    std::string algorithm_;
};

class containerAlgorithm_pimpl: public virtual containerAlgorithm_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual const std::string&
  post_containerAlgorithm ();

private:
    std::string containerAlgorithm;
};

class simulationContainer_pimpl: public virtual simulationContainer_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  boundaryConditions (const library::boundaryConditions&);

  virtual void
  dimension (const library::dimension&);

  virtual void
  mesh (double);

  virtual void
  cutOff (double);

  virtual void
  containerAlgorithm (const std::string&);

  virtual library::simulationContainer
  post_simulationContainer ();

private:
    library::simulationContainer simulationContainer_;
};

class boundaryConditions_pimpl: public virtual boundaryConditions_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual library::boundaryConditions
  post_boundaryConditions ();
};

class benchmark_pimpl: public virtual benchmark_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual library::benchmark
  post_benchmark ();
};

class Cube_pimpl: public virtual Cube_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  dimension (const library::dimension&);

  virtual void
  startPoint (const library::point&);

  virtual void
  h (double);

  virtual void
  mass (double);

  virtual void
  velocity (const library::velocity&);

  virtual void
  epsilon (const library::epsilon&);

  virtual void
  sigma (const library::sigma&);

  virtual library::Cube
  post_Cube ();

private:
    library::Cube cube_;
};

class Sphere_pimpl: public virtual Sphere_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  center (const library::point&);

  virtual void
  radius (double);

  virtual void
  h (double);

  virtual void
  mass (double);

  virtual void
  velocity (const library::velocity&);

  virtual void
  epsilon (const library::epsilon&);

  virtual void
  sigma (const library::sigma&);

  virtual library::Sphere
  post_Sphere ();

private:
    library::Sphere sphere_;
};

class particles_pimpl: public virtual particles_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  Cube (const library::Cube&);

  virtual void
  Sphere (const library::Sphere&);

  virtual library::particles
  post_particles ();

private:
    library::particles particles_;
};

class thermostats_pimpl: public virtual thermostats_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  initialTemperature (double);

  virtual void
  targetTemperature (double);

  virtual void
  maxDelta (double);

  virtual void
  stepSize (int);

  virtual library::thermostats
  post_thermostats ();

private:
    library::thermostats thermostats_;
};

class molsim_pimpl: public virtual molsim_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  input_file (const ::std::string&);

  virtual void
  delta_t (library::time);

  virtual void
  end_time (library::time);

  virtual void
  output_step (int);

  virtual void
  epsilon (const library::epsilon&);

  virtual void
  sigma (const library::sigma&);

  virtual void
  gravity (double);

  virtual void
  averageV (double);

  virtual void
  algorithm (const std::string&);

  virtual void
  simulationContainer (const library::simulationContainer&);

  virtual void
  particles (const library::particles&);

  virtual void
  thermostats (const library::thermostats&);

  virtual void
  benchmark (const library::benchmark&);

  virtual library::molsim
  post_molsim ();

private:
    library::molsim molsim_;
};

#endif // MOL_SIM_IMPL_H
