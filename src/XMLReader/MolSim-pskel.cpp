// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "MolSim-pskel.h"

// dimension_pskel
//

void dimension_pskel::
x_parser (::xml_schema::int_pskel& p)
{
  this->x_parser_ = &p;
}

void dimension_pskel::
y_parser (::xml_schema::int_pskel& p)
{
  this->y_parser_ = &p;
}

void dimension_pskel::
z_parser (::xml_schema::int_pskel& p)
{
  this->z_parser_ = &p;
}

void dimension_pskel::
parsers (::xml_schema::int_pskel& x,
         ::xml_schema::int_pskel& y,
         ::xml_schema::int_pskel& z)
{
  this->x_parser_ = &x;
  this->y_parser_ = &y;
  this->z_parser_ = &z;
}

dimension_pskel::
dimension_pskel ()
: x_parser_ (0),
  y_parser_ (0),
  z_parser_ (0)
{
}

// molsim_pskel
//

void molsim_pskel::
input_file_parser (::input_file_pskel& p)
{
  this->input_file_parser_ = &p;
}

void molsim_pskel::
delta_t_parser (::delta_t_pskel& p)
{
  this->delta_t_parser_ = &p;
}

void molsim_pskel::
end_time_parser (::end_time_pskel& p)
{
  this->end_time_parser_ = &p;
}

void molsim_pskel::
output_step_parser (::output_step_pskel& p)
{
  this->output_step_parser_ = &p;
}

void molsim_pskel::
epsilon_parser (::epsilon_pskel& p)
{
  this->epsilon_parser_ = &p;
}

void molsim_pskel::
sigma_parser (::sigma_pskel& p)
{
  this->sigma_parser_ = &p;
}

void molsim_pskel::
averageV_parser (::averageV_pskel& p)
{
  this->averageV_parser_ = &p;
}

void molsim_pskel::
dimension_parser (::dimension_pskel& p)
{
  this->dimension_parser_ = &p;
}

void molsim_pskel::
mesh_parser (::mesh_pskel& p)
{
  this->mesh_parser_ = &p;
}

void molsim_pskel::
cutoff_parser (::cutoff_pskel& p)
{
  this->cutoff_parser_ = &p;
}

void molsim_pskel::
algorithm_parser (::algorithm_pskel& p)
{
  this->algorithm_parser_ = &p;
}

void molsim_pskel::
benchmark_parser (::benchmark_pskel& p)
{
  this->benchmark_parser_ = &p;
}

void molsim_pskel::
parsers (::input_file_pskel& input_file,
         ::delta_t_pskel& delta_t,
         ::end_time_pskel& end_time,
         ::output_step_pskel& output_step,
         ::epsilon_pskel& epsilon,
         ::sigma_pskel& sigma,
         ::averageV_pskel& averageV,
         ::dimension_pskel& dimension,
         ::mesh_pskel& mesh,
         ::cutoff_pskel& cutoff,
         ::algorithm_pskel& algorithm,
         ::benchmark_pskel& benchmark)
{
  this->input_file_parser_ = &input_file;
  this->delta_t_parser_ = &delta_t;
  this->end_time_parser_ = &end_time;
  this->output_step_parser_ = &output_step;
  this->epsilon_parser_ = &epsilon;
  this->sigma_parser_ = &sigma;
  this->averageV_parser_ = &averageV;
  this->dimension_parser_ = &dimension;
  this->mesh_parser_ = &mesh;
  this->cutoff_parser_ = &cutoff;
  this->algorithm_parser_ = &algorithm;
  this->benchmark_parser_ = &benchmark;
}

molsim_pskel::
molsim_pskel ()
: input_file_parser_ (0),
  delta_t_parser_ (0),
  end_time_parser_ (0),
  output_step_parser_ (0),
  epsilon_parser_ (0),
  sigma_parser_ (0),
  averageV_parser_ (0),
  dimension_parser_ (0),
  mesh_parser_ (0),
  cutoff_parser_ (0),
  algorithm_parser_ (0),
  benchmark_parser_ (0)
{
}

// input_file_pskel
//

void input_file_pskel::
post_input_file ()
{
}

// delta_t_pskel
//

void delta_t_pskel::
post_delta_t ()
{
}

// end_time_pskel
//

void end_time_pskel::
post_end_time ()
{
}

// output_step_pskel
//

void output_step_pskel::
post_output_step ()
{
}

// epsilon_pskel
//

void epsilon_pskel::
post_epsilon ()
{
}

// sigma_pskel
//

void sigma_pskel::
post_sigma ()
{
}

// averageV_pskel
//

void averageV_pskel::
post_averageV ()
{
}

// dimension_pskel
//

void dimension_pskel::
x (int)
{
}

void dimension_pskel::
y (int)
{
}

void dimension_pskel::
z (int)
{
}

void dimension_pskel::
post_dimension ()
{
}

bool dimension_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "x" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->x_parser_;

    if (this->x_parser_)
      this->x_parser_->pre ();

    return true;
  }

  if (n == "y" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->y_parser_;

    if (this->y_parser_)
      this->y_parser_->pre ();

    return true;
  }

  if (n == "z" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->z_parser_;

    if (this->z_parser_)
      this->z_parser_->pre ();

    return true;
  }

  return false;
}

bool dimension_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "x" && ns.empty ())
  {
    if (this->x_parser_)
      this->x (this->x_parser_->post_int ());

    return true;
  }

  if (n == "y" && ns.empty ())
  {
    if (this->y_parser_)
      this->y (this->y_parser_->post_int ());

    return true;
  }

  if (n == "z" && ns.empty ())
  {
    if (this->z_parser_)
      this->z (this->z_parser_->post_int ());

    return true;
  }

  return false;
}

// mesh_pskel
//

void mesh_pskel::
post_mesh ()
{
}

// cutoff_pskel
//

void cutoff_pskel::
post_cutoff ()
{
}

// algorithm_pskel
//

void algorithm_pskel::
post_algorithm ()
{
}

// benchmark_pskel
//

void benchmark_pskel::
post_benchmark ()
{
}

// molsim_pskel
//

void molsim_pskel::
input_file ()
{
}

void molsim_pskel::
delta_t ()
{
}

void molsim_pskel::
end_time ()
{
}

void molsim_pskel::
output_step ()
{
}

void molsim_pskel::
epsilon ()
{
}

void molsim_pskel::
sigma ()
{
}

void molsim_pskel::
averageV ()
{
}

void molsim_pskel::
dimension ()
{
}

void molsim_pskel::
mesh ()
{
}

void molsim_pskel::
cutoff ()
{
}

void molsim_pskel::
algorithm ()
{
}

void molsim_pskel::
benchmark ()
{
}

void molsim_pskel::
post_molsim ()
{
}

bool molsim_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "input_file" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->input_file_parser_;

    if (this->input_file_parser_)
      this->input_file_parser_->pre ();

    return true;
  }

  if (n == "delta_t" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->delta_t_parser_;

    if (this->delta_t_parser_)
      this->delta_t_parser_->pre ();

    return true;
  }

  if (n == "end_time" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->end_time_parser_;

    if (this->end_time_parser_)
      this->end_time_parser_->pre ();

    return true;
  }

  if (n == "output_step" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->output_step_parser_;

    if (this->output_step_parser_)
      this->output_step_parser_->pre ();

    return true;
  }

  if (n == "epsilon" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->epsilon_parser_;

    if (this->epsilon_parser_)
      this->epsilon_parser_->pre ();

    return true;
  }

  if (n == "sigma" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->sigma_parser_;

    if (this->sigma_parser_)
      this->sigma_parser_->pre ();

    return true;
  }

  if (n == "averageV" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->averageV_parser_;

    if (this->averageV_parser_)
      this->averageV_parser_->pre ();

    return true;
  }

  if (n == "dimension" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->dimension_parser_;

    if (this->dimension_parser_)
      this->dimension_parser_->pre ();

    return true;
  }

  if (n == "mesh" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->mesh_parser_;

    if (this->mesh_parser_)
      this->mesh_parser_->pre ();

    return true;
  }

  if (n == "cutoff" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->cutoff_parser_;

    if (this->cutoff_parser_)
      this->cutoff_parser_->pre ();

    return true;
  }

  if (n == "algorithm" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->algorithm_parser_;

    if (this->algorithm_parser_)
      this->algorithm_parser_->pre ();

    return true;
  }

  if (n == "benchmark" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->benchmark_parser_;

    if (this->benchmark_parser_)
      this->benchmark_parser_->pre ();

    return true;
  }

  return false;
}

bool molsim_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "input_file" && ns.empty ())
  {
    if (this->input_file_parser_)
    {
      this->input_file_parser_->post_input_file ();
      this->input_file ();
    }

    return true;
  }

  if (n == "delta_t" && ns.empty ())
  {
    if (this->delta_t_parser_)
    {
      this->delta_t_parser_->post_delta_t ();
      this->delta_t ();
    }

    return true;
  }

  if (n == "end_time" && ns.empty ())
  {
    if (this->end_time_parser_)
    {
      this->end_time_parser_->post_end_time ();
      this->end_time ();
    }

    return true;
  }

  if (n == "output_step" && ns.empty ())
  {
    if (this->output_step_parser_)
    {
      this->output_step_parser_->post_output_step ();
      this->output_step ();
    }

    return true;
  }

  if (n == "epsilon" && ns.empty ())
  {
    if (this->epsilon_parser_)
    {
      this->epsilon_parser_->post_epsilon ();
      this->epsilon ();
    }

    return true;
  }

  if (n == "sigma" && ns.empty ())
  {
    if (this->sigma_parser_)
    {
      this->sigma_parser_->post_sigma ();
      this->sigma ();
    }

    return true;
  }

  if (n == "averageV" && ns.empty ())
  {
    if (this->averageV_parser_)
    {
      this->averageV_parser_->post_averageV ();
      this->averageV ();
    }

    return true;
  }

  if (n == "dimension" && ns.empty ())
  {
    if (this->dimension_parser_)
    {
      this->dimension_parser_->post_dimension ();
      this->dimension ();
    }

    return true;
  }

  if (n == "mesh" && ns.empty ())
  {
    if (this->mesh_parser_)
    {
      this->mesh_parser_->post_mesh ();
      this->mesh ();
    }

    return true;
  }

  if (n == "cutoff" && ns.empty ())
  {
    if (this->cutoff_parser_)
    {
      this->cutoff_parser_->post_cutoff ();
      this->cutoff ();
    }

    return true;
  }

  if (n == "algorithm" && ns.empty ())
  {
    if (this->algorithm_parser_)
    {
      this->algorithm_parser_->post_algorithm ();
      this->algorithm ();
    }

    return true;
  }

  if (n == "benchmark" && ns.empty ())
  {
    if (this->benchmark_parser_)
    {
      this->benchmark_parser_->post_benchmark ();
      this->benchmark ();
    }

    return true;
  }

  return false;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

